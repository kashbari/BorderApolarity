

# This file was *autogenerated* from the file structure3_15.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_15 = Integer(15)
load('borderapolarity.sage')

def e(i,j,n):
    return matrix(QQ,n,n,{(i,j):_sage_const_1 })

def basis(i,n):
    assert i < n**_sage_const_2 -_sage_const_1 
    i,j = i//n, i%n
    if i==j:
        return e(i,i,n) - e(i+_sage_const_1 ,i+_sage_const_1 ,n)
    else:
        return e(i,j,n)

# e_ij
def Tsln(n):
    T = [{} for i in range(n**_sage_const_2 -_sage_const_1 )]
    B = matrix(QQ,[ basis(i,n).list() for i in range(n**_sage_const_2 -_sage_const_1 )])
    for i in range(n**_sage_const_2 -_sage_const_1 ):
        a = basis(i,n)  
        for j in range(n**_sage_const_2 -_sage_const_1 ):
            b = basis(j,n)
            c = a*b - b*a
            c = B.solve_left(vector(QQ,c.list()))
            for k in c.nonzero_positions():
                T[i][(j,k)] = c[k]
    T = [matrix(QQ,n**_sage_const_2 -_sage_const_1 ,n**_sage_const_2 -_sage_const_1 ,m) for m in T] 

    reps = [[-T[i*n+i+_sage_const_1 ] for i in range(n-_sage_const_1 )],
            [-T[(i+_sage_const_1 )*n+i] for i in range(n-_sage_const_1 )],
            [-T[i*n+i] for i in range(n-_sage_const_1 )]]

    C = matrix(QQ,n-_sage_const_1 ,n-_sage_const_1 )
    for i in range(n-_sage_const_1 ):
        C[i,i] = _sage_const_2 
    for i in range(n-_sage_const_2 ):
        C[i+_sage_const_1 ,i] = -_sage_const_1 
        C[i,i+_sage_const_1 ] = -_sage_const_1 

    return T,[reps,reps,module_dual(reps)],C

T,reps,C = Tsln(_sage_const_3 )
data,em = border_apolarity_110data(T,reps,C)
r = _sage_const_15 
upsets = list(grassmannian_hwvs_upsets(data,em.dimensions()[_sage_const_0 ]-r))


#print len(upsets)
# for v in grassmannian_hwvs_upsets(data,r):
#     print v
G = grassmannian_hwvs(data,r)
# for v in grassmannian_hwvs(data,r):
#     print v


#SLURM IT UP
k = int(sys.argv[_sage_const_1 ])

H = list(grassmannian_hwvs_for_upset(data,upsets[k],verbose=True))

def Grassmannian_hwvs(k,mdata,verbose=True):
	for hwt in grassmannian_hwvs_for_upset(data,upsets[k],verbose):
		yield hwt

def border_apolarity_110(T,reps,C,r,k):
	with open("RESULTS3_15/sl3rk15res{}.txt".format(k),'w') as ff:
		mdata,em = border_apolarity_110data(T,reps,C)
		admin = len(T)
		cand110 = []
		i = _sage_const_0 
		ff.write(str(len(H))+'\n')
		if len(H) != _sage_const_0 :
			for ghwv in Grassmannian_hwvs(k,mdata,em.dimensions()[_sage_const_0 ]-r):
				cand = em*ghwv
				cand = AB_grass_restrict_ok(cand,admin,r)
				if cand is not None:
					cand110.append(cand)
					ff.write(str(i)+'. Candidate\n')
				else:
					ff.write(str(i)+'. None\n')
				i = i+_sage_const_1 
	return 

border_apolarity_110(T,reps,C,r,k)

# vim: ft=python

