
# This file was *autogenerated* from the file structure_distinguished.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16)
load('borderapolarity3.sage')
load('distinguished.sage')

def e(i,j,n):
    return matrix(QQ,n,n,{(i,j):_sage_const_1 })

def basis(i,n):
    assert i < n**_sage_const_2 -_sage_const_1 
    i,j = i//n, i%n
    if i==j:
        return e(i,i,n) - e(i+_sage_const_1 ,i+_sage_const_1 ,n)
    else:
        return e(i,j,n)

# e_ij
def Tsln(n):
    T = [{} for i in range(n**_sage_const_2 -_sage_const_1 )]
    B = matrix(QQ,[ basis(i,n).list() for i in range(n**_sage_const_2 -_sage_const_1 )])
    for i in range(n**_sage_const_2 -_sage_const_1 ):
        a = basis(i,n)  
        for j in range(n**_sage_const_2 -_sage_const_1 ):
            b = basis(j,n)
            c = a*b - b*a
            c = B.solve_left(vector(QQ,c.list()))
            for k in c.nonzero_positions():
                T[i][(j,k)] = c[k]
    T = [matrix(QQ,n**_sage_const_2 -_sage_const_1 ,n**_sage_const_2 -_sage_const_1 ,m) for m in T] 

    reps = [[-T[i*n+i+_sage_const_1 ] for i in range(n-_sage_const_1 )],
            [-T[(i+_sage_const_1 )*n+i] for i in range(n-_sage_const_1 )],
            [-T[i*n+i] for i in range(n-_sage_const_1 )]]

    C = matrix(QQ,n-_sage_const_1 ,n-_sage_const_1 )
    for i in range(n-_sage_const_1 ):
        C[i,i] = _sage_const_2 
    for i in range(n-_sage_const_2 ):
        C[i+_sage_const_1 ,i] = -_sage_const_1 
        C[i,i+_sage_const_1 ] = -_sage_const_1 

    return T,[reps,reps,module_dual(reps)],C

T,reps,C = Tsln(_sage_const_3 )
data,em = border_apolarity_110data(T,reps,C)
r = _sage_const_16 
upsets = list(grassmannian_hwvs_upsets(data,em.dimensions()[_sage_const_0 ]-r))



D = Poset_Distinguished([(_sage_const_2 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_0 ),(_sage_const_0 ,_sage_const_3 ),(_sage_const_1 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_0 )],data)
#data['M'] = D
#print len(upsets)
# for v in grassmannian_hwvs_upsets(data,r):
#     print v
#G = grassmannian_hwvs(data,r)
# for v in grassmannian_hwvs(data,r):
#     print v



#SLURM IT UP
k = int(sys.argv[_sage_const_1 ])
#upp = upsetsD(upsets[k],D)

#H = list(grassmannian_hwvs_for_upset_distinguished(data,upsets[k],verbose=True))


def Grassmannian_hwvs(k,data,verbose):
	for hwt in grassmannian_hwvs_for_upset(data,upsets[k],verbose):
		print(hwv)
		if hwv.base_ring() != QQ:
			for q in Vari(hwv):
				yield q

def border_apolarity_110(T,reps,C,r,k,D):
        with open("DistRes3_16/sl3rk16DISTres{}.txt".format(k),'w') as ff:
                mdata,em = border_apolarity_110data(T,reps,C)
                admin = len(T)
                cand110 = []
                i = _sage_const_1 
                G = hwvs_for_dist_upsets(D,upsets[k],data) 
                for ghwv in G:
		        cand = em*ghwv
                        cand = AB_grass_restrict_ok(cand,admin,r)
                        if cand is not None:
                                cand110.append(cand)
                                ff.write(str(i)+'. Candidate\n')
                        else:
                                ff.write(str(i)+'. None\n')
                        i = i+_sage_const_1 
        return


border_apolarity_110(T,reps,C,r,k,D)

print('DONE')
# vim: ft=python

